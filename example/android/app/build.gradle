def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}
def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.plugin_chat_example"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a", 'x86', 'x86_64' // ，'armeabi', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            // wfc kit start
            jniLibs.srcDirs += ['libs', 'kit/libs']
            res.srcDirs += ['kit/src/main/res', 'kit/src/main/res-av']
            assets.srcDirs += ['kit/src/main/assets']
            java.srcDirs += ['kit/src/main/java']

//            manifest.srcFile {
//                /* 多个AndroidManifest拼接，
//                修改AndroidManifest运行时及时更新，
//                clean后不会自动创建，需手动sync，可能是因为分两步的问题*/
//                def _manifests = ['src/main/AndroidManifest.xml', 'kit/src/main/AndroidManifest.xml']
//                def main = file('src/main/AndroidManifest.xml')
//                def targetFile = new File(getBuildDir(), "AndroidManifest.xml")
//                if (!targetFile.getParentFile().exists()) {
//                    targetFile.getParentFile().mkdirs()
//                }
//                def main_text = main.getText("utf-8")
//                def appIndex = main_text.lastIndexOf("</application>")
//                def targetContent = main_text.substring(0, appIndex)
//                for (item in _manifests) {
//                    def c = file(item).getText("utf-8")
//                    def appTag = "<application>"
//                    def ct = c.substring(c.indexOf(appTag) + appTag.length(), c.lastIndexOf("</application>"))
//                    targetContent += ct
//                }
//                targetContent += main_text.substring(appIndex)
//                targetFile.write(targetContent, "utf-8")
//                return targetFile.getAbsolutePath()
//            }
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}
flutter {
    source '../..'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(include: ['*.jar'], dir: 'kit/libs')

    //kit
    implementation files('libs/TencentLocationSDK_v4.9.7.12_r247861_161205_1104.jar')
    implementation files('libs/TencentMapSDK_Raster_v_1.2.7_51ae0e7.jar')
    implementation files('libs/TencentSearch1.1.3.jar')

    implementation 'com.meizu.flyme.internet:push-internal:3.4.2@aar'
    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0.1'
    implementation 'com.lqr.adapter:library:1.0.2'
    implementation 'com.jaeger.statusbaruitl:library:1.3.5'

    // wfc kit start
    implementation 'androidx.appcompat:appcompat:1.1.0-beta01'
    implementation 'com.google.android.material:material:1.1.0-alpha10'
    implementation 'cjt.library.wheel:camera:1.1.9'
    implementation 'com.kyleduo.switchbutton:library:1.4.4'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.okio:okio:1.14.0'
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'org.webrtc:google-webrtc:1.0.30039'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'q.rorbin:badgeview:1.1.3'
    implementation 'com.google.code.gson:gson:2.8.5'

    // ViewModel and LiveData
    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    implementation 'com.king.zxing:zxing-lite:1.1.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'com.google.android:flexbox:2.0.1'
}

apply plugin: 'com.huawei.agconnect'