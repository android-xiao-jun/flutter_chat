def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.plugin_chat_example"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        ndk {
            abiFilters "armeabi-v7a", 'x86', 'x86_64' // ï¼Œ'armeabi', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api files('libs_aar/client.aar')
    api files('libs_aar/emojilibrary.aar')
    api files('libs_aar/imagepicker.aar')
    api files('libs_aar/mars-core-release.aar')
    api files('libs_aar/push.aar')
    api files('libs_aar/avenginekit.aar')
    api files('libs_aar/uikit.aar')

    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0.1'

    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    implementation 'q.rorbin:badgeview:1.1.3'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'
    implementation 'com.google.android.material:material:1.3.0-alpha01'

    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation 'com.king.zxing:zxing-lite:1.1.1'

    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okio:okio:1.14.0'


}

flutter {
    source '../..'
}
apply plugin: 'com.huawei.agconnect'